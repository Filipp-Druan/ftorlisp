#+TITLE: Фторлисп
#+AUTHOR: Друан Филипп Сергеевич
#+LANGUAGE: ru

#+LATEX_CLASS:  article
#+LATEX_HEADER: \usepackage[T2A]{fontenc}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[russian]{babel}
#+LATEX_HEADER: \hypersetup{colorlinks=true}

* Описание языка

** Базовые типы
Базовые типы:

*** Int64
Базовый числовой тип. Поддерживает сложение, вычитание, умножение, деление.

*** Str
Строковый литерал -- это указатель на Null-терменированную область. Как в Си.

** Модули
Каждый файл - это модуль. В модуле могут быть:
1) Константы
2) Определения функций

** Константы
Константы бывают числовыми и строковыми.
#+begin_src racket
  (let num 123)
  (let string "Hello")
#+end_src
Тип константы выводится.

При этом, тип можно указать явно:
#+begin_src racket
  (let [num    Int64]    123)
  (let [string Str] "Hello")
#+end_src

** Опреаторы
В языке есть математические операторы:
#+begin_src racket
  (let a 10)
  (let b 4)

  (println (+ a b)) ; 14
  (println (- a b)) ; 6
  (println (* a b)) ; 40
  (println (/ a b)) ; 2 Целочисленное деление
  (println (modulo a b)) ; 2
#+end_src

** Переменные
В языке есть переменные. Они объявляются ключвым словом 

** Функции
Функции определяются вот так:
#+begin_src racket
  (define (foo [a Int64] [b Int64]) I64
     (+ a b))
#+end_src
Ключевое слово define, после него идёт список из имени и параметров каждый параметр - это список из имени и типа. Дальше -- тип возвращаемого значения.
Все остальные выражения - это тело функции. В ней могут быть:
1) Объя

Вызываются функции как в обычном Лиспе:
#+begin_src racket
(print num)
#+end_src

Функции могут быть перегружены по первому параметру.


* Структура компилятора
** Синтаксический анализ
Код считывается при помощи стандартного считывателя Racket.
Синтаксический анализ проводится при помощи сопоставления с образцом.

Дальше должен идти семантический анализ. Нужно проверить совпадение типов, существование функций, которые мы вызываем.

Дальше идёт генерация кода на ассемблере. Соглашение о вызовах - System V.

* Интерфейс компилятора

